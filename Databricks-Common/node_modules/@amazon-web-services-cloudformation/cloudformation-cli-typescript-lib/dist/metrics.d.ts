import { Dimension, DimensionName } from 'aws-sdk/clients/cloudwatch';
import { ServiceConfigurationOptions } from 'aws-sdk/lib/service';
import { Logger } from './log-delivery';
import { AwsTaskWorkerPool, SessionProxy } from './proxy';
import { Action, MetricTypes, StandardUnit } from './interface';
export declare type DimensionRecord = Record<DimensionName, string>;
export declare function formatDimensions(dimensions: DimensionRecord): Array<Dimension>;
export declare class MetricsPublisher {
    private readonly session;
    private readonly logger;
    private readonly resourceType;
    protected readonly workerPool?: AwsTaskWorkerPool;
    private resourceNamespace;
    private client;
    constructor(session: SessionProxy, logger: Logger, resourceType: string, workerPool?: AwsTaskWorkerPool);
    refreshClient(options?: ServiceConfigurationOptions): void;
    publishMetric(metricName: MetricTypes, dimensions: DimensionRecord, unit: StandardUnit, value: number, timestamp: Date): Promise<void>;
    publishExceptionMetric(timestamp: Date, action: Action, error: Error): Promise<any>;
    publishInvocationMetric(timestamp: Date, action: Action): Promise<any>;
    publishDurationMetric(timestamp: Date, action: Action, milliseconds: number): Promise<any>;
    publishLogDeliveryExceptionMetric(timestamp: Date, error: Error): Promise<any>;
    private log;
}
export declare class MetricsPublisherProxy {
    private publishers;
    private queue;
    addMetricsPublisher(metricsPublisher?: MetricsPublisher): void;
    publishExceptionMetric(timestamp: Date, action: Action, error: Error): Promise<void>;
    publishInvocationMetric(timestamp: Date, action: Action): Promise<void>;
    publishDurationMetric(timestamp: Date, action: Action, milliseconds: number): Promise<void>;
    publishLogDeliveryExceptionMetric(timestamp: Date, error: Error): Promise<void>;
}
