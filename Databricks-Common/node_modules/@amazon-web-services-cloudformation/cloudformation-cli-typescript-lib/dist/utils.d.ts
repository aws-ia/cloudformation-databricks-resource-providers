/// <reference types="node" />
import { EventEmitter } from 'events';
declare type PromiseFunction = () => Promise<any>;
export declare function delay(seconds: number): Promise<void>;
export declare class ProgressTracker extends EventEmitter {
    #private;
    constructor();
    get done(): boolean;
    set done(value: boolean);
    end(): void;
    restart(): void;
    addSubmitted(): void;
    addCompleted(): void;
    addFailed(): void;
    get completed(): number;
    get isFinished(): boolean;
    get message(): string;
    waitCompletion(): Promise<void>;
}
export declare class Queue {
    #private;
    enqueue(promise: PromiseFunction): Promise<any>;
    private dequeue;
}
export declare function replaceAll(original: string, substr: string, newSubstr: string): string;
export declare function deepFreeze(obj: Record<string, any> | Array<any> | Function, processed?: Set<unknown>): Record<string, any>;
export {};
