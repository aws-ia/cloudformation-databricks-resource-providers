"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformValue = exports.recastPrimitive = void 0;
const exceptions_1 = require("./exceptions");
const interface_1 = require("./interface");
const recastPrimitive = (cls, k, v) => {
    if (Object.is(cls, Object)) {
        return v;
    }
    if ((Object.is(cls, Boolean) ||
        Object.is(cls, Number) ||
        Object.is(cls, BigInt) ||
        Object.is(cls, interface_1.Integer)) &&
        v.length === 0) {
        return null;
    }
    if (Object.is(cls, Boolean)) {
        if (v.toLowerCase() === 'true') {
            return true;
        }
        if (v.toLowerCase() === 'false') {
            return false;
        }
        throw new exceptions_1.InvalidRequest(`Value for ${k} "${v}" is not boolean`);
    }
    return cls(v).valueOf();
};
exports.recastPrimitive = recastPrimitive;
const transformValue = (cls, key, value, obj, classes = [], index = 0) => {
    if (value == null) {
        return value;
    }
    if (index === 0) {
        classes.push(cls);
    }
    const currentClass = classes[index || 0];
    if (value instanceof Map || Object.is(currentClass, Map)) {
        const temp = new Map(value instanceof Map ? value : Object.entries(value));
        temp.forEach((item, itemKey) => {
            temp.set(itemKey, exports.transformValue(cls, key, item, obj, classes, index + 1));
        });
        return new Map(temp);
    }
    else if (value instanceof Set || Object.is(currentClass, Set)) {
        const temp = Array.from(value).map((item) => {
            return exports.transformValue(cls, key, item, obj, classes, index + 1);
        });
        return new Set(temp);
    }
    else if (Array.isArray(value) || Array.isArray(currentClass)) {
        return value.map((item) => {
            return exports.transformValue(cls, key, item, obj, classes, index + 1);
        });
    }
    else {
        if (Object.is(cls, Object)) {
            return value;
        }
        if (Object.is(cls, String) ||
            cls.name === 'String' ||
            Object.is(cls, Number) ||
            cls.name === 'Number' ||
            Object.is(cls, Boolean) ||
            cls.name === 'Boolean' ||
            Object.is(cls, BigInt) ||
            cls.name === 'BigInt' ||
            Object.is(cls, interface_1.Integer) ||
            cls.name === 'Integer') {
            if (typeof value === 'string') {
                return exports.recastPrimitive(cls, key, value);
            }
            return value;
        }
        else {
            throw new exceptions_1.InvalidRequest(`Unsupported type: ${typeof value} [${cls.name}] for ${key}`);
        }
    }
};
exports.transformValue = transformValue;
