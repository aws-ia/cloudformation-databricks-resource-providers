import { BaseModel, HandlerErrorCode } from './interface';
import { ProgressEvent } from './proxy';
export declare abstract class BaseHandlerException extends Error {
    static serialVersionUID: number;
    errorCode: HandlerErrorCode;
    constructor(message?: any, errorCode?: HandlerErrorCode);
    toProgressEvent<T extends BaseModel = BaseModel>(): ProgressEvent<T>;
}
export declare class NotUpdatable extends BaseHandlerException {
}
export declare class InvalidRequest extends BaseHandlerException {
}
export declare class InvalidTypeConfiguration extends BaseHandlerException {
    constructor(typeName: string, reason: string);
}
export declare class AccessDenied extends BaseHandlerException {
}
export declare class InvalidCredentials extends BaseHandlerException {
}
export declare class AlreadyExists extends BaseHandlerException {
    constructor(typeName: string, identifier: string);
}
export declare class NotFound extends BaseHandlerException {
    constructor(typeName: string, identifier: string);
}
export declare class ResourceConflict extends BaseHandlerException {
}
export declare class Throttling extends BaseHandlerException {
}
export declare class ServiceLimitExceeded extends BaseHandlerException {
}
export declare class NotStabilized extends BaseHandlerException {
}
export declare class GeneralServiceException extends BaseHandlerException {
}
export declare class ServiceInternalError extends BaseHandlerException {
}
export declare class NetworkFailure extends BaseHandlerException {
}
export declare class InternalFailure extends BaseHandlerException {
}
