"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalFailure = exports.NetworkFailure = exports.ServiceInternalError = exports.GeneralServiceException = exports.NotStabilized = exports.ServiceLimitExceeded = exports.Throttling = exports.ResourceConflict = exports.NotFound = exports.AlreadyExists = exports.InvalidCredentials = exports.AccessDenied = exports.InvalidTypeConfiguration = exports.InvalidRequest = exports.NotUpdatable = exports.BaseHandlerException = void 0;
const interface_1 = require("./interface");
const proxy_1 = require("./proxy");
class BaseHandlerException extends Error {
    constructor(message, errorCode) {
        super(message);
        this.errorCode =
            errorCode || interface_1.HandlerErrorCode[this.constructor.name];
        Object.setPrototypeOf(this, new.target.prototype);
    }
    toProgressEvent() {
        return proxy_1.ProgressEvent.failed(this.errorCode, this.toString());
    }
}
exports.BaseHandlerException = BaseHandlerException;
BaseHandlerException.serialVersionUID = -1646136434112354328;
class NotUpdatable extends BaseHandlerException {
}
exports.NotUpdatable = NotUpdatable;
class InvalidRequest extends BaseHandlerException {
}
exports.InvalidRequest = InvalidRequest;
class InvalidTypeConfiguration extends BaseHandlerException {
    constructor(typeName, reason) {
        super(`Invalid TypeConfiguration provided for type '${typeName}'. Reason: ${reason}`, interface_1.HandlerErrorCode.InvalidTypeConfiguration);
    }
}
exports.InvalidTypeConfiguration = InvalidTypeConfiguration;
class AccessDenied extends BaseHandlerException {
}
exports.AccessDenied = AccessDenied;
class InvalidCredentials extends BaseHandlerException {
}
exports.InvalidCredentials = InvalidCredentials;
class AlreadyExists extends BaseHandlerException {
    constructor(typeName, identifier) {
        super(`Resource of type '${typeName}' with identifier '${identifier}' already exists.`);
    }
}
exports.AlreadyExists = AlreadyExists;
class NotFound extends BaseHandlerException {
    constructor(typeName, identifier) {
        super(`Resource of type '${typeName}' with identifier '${identifier}' was not found.`);
    }
}
exports.NotFound = NotFound;
class ResourceConflict extends BaseHandlerException {
}
exports.ResourceConflict = ResourceConflict;
class Throttling extends BaseHandlerException {
}
exports.Throttling = Throttling;
class ServiceLimitExceeded extends BaseHandlerException {
}
exports.ServiceLimitExceeded = ServiceLimitExceeded;
class NotStabilized extends BaseHandlerException {
}
exports.NotStabilized = NotStabilized;
class GeneralServiceException extends BaseHandlerException {
}
exports.GeneralServiceException = GeneralServiceException;
class ServiceInternalError extends BaseHandlerException {
}
exports.ServiceInternalError = ServiceInternalError;
class NetworkFailure extends BaseHandlerException {
}
exports.NetworkFailure = NetworkFailure;
class InternalFailure extends BaseHandlerException {
}
exports.InternalFailure = InternalFailure;
