"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var ProgressEvent_1, _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceHandlerRequest = exports.ProgressEvent = exports.SessionProxy = void 0;
const all_1 = __importDefault(require("aws-sdk/clients/all"));
const tombok_1 = require("@org-formation/tombok");
const class_transformer_1 = require("class-transformer");
const interface_1 = require("./interface");
class SessionProxy {
    constructor(options) {
        this.options = options;
    }
    extendAwsClient(service, options, workerPool) {
        const client = new Proxy(service, {
            get(obj, prop) {
                if ('makeRequestPromise' === prop) {
                    return async (operation, input, headers) => {
                        if (workerPool && workerPool.runAwsTask) {
                            try {
                                const result = await workerPool.runAwsTask({
                                    name: obj.serviceIdentifier,
                                    options,
                                    operation,
                                    input,
                                    headers,
                                });
                                return result;
                            }
                            catch (err) {
                                console.log(err);
                            }
                        }
                        const request = obj.makeRequest(operation, input);
                        const headerEntries = Object.entries(headers || {});
                        if (headerEntries.length) {
                            request.on('build', () => {
                                for (const [key, value] of headerEntries) {
                                    request.httpRequest.headers[key] = value;
                                }
                            });
                        }
                        return await request.promise();
                    };
                }
                return obj[prop];
            },
        });
        if (client.config && client.config.update) {
            client.config.update(options);
        }
        return client;
    }
    client(service, options, workerPool) {
        const updatedConfig = { ...this.options, ...options };
        let ctor;
        let client;
        if (typeof service === 'string') {
            const clients = all_1.default;
            ctor = clients[service];
        }
        else if (typeof service === 'function') {
            ctor = service;
        }
        else {
            client = this.extendAwsClient(service, updatedConfig, workerPool);
        }
        if (!client) {
            client = this.extendAwsClient(new ctor(updatedConfig), updatedConfig, workerPool);
        }
        return client;
    }
    get configuration() {
        return this.options;
    }
    static getSession(credentials, region) {
        if (!credentials) {
            return null;
        }
        return new SessionProxy({
            credentials,
            region,
        });
    }
}
exports.SessionProxy = SessionProxy;
let ProgressEvent = ProgressEvent_1 = class ProgressEvent extends interface_1.BaseDto {
    constructor(partial) {
        super();
        this.message = '';
        this.callbackDelaySeconds = 0;
        if (partial) {
            Object.assign(this, partial);
        }
    }
    static builder(template) {
        return null;
    }
    static failed(errorCode, message) {
        const event = ProgressEvent_1.builder()
            .status(interface_1.OperationStatus.Failed)
            .errorCode(errorCode)
            .message(message)
            .build();
        return event;
    }
    static progress(model, ctx) {
        const progress = ProgressEvent_1.builder().status(interface_1.OperationStatus.InProgress);
        if (ctx) {
            progress.callbackContext(ctx);
        }
        if (model) {
            progress.resourceModel(model);
        }
        const event = progress.build();
        return event;
    }
    static success(model, ctx) {
        const event = ProgressEvent_1.progress(model, ctx);
        event.status = interface_1.OperationStatus.Success;
        return event;
    }
};
__decorate([
    class_transformer_1.Expose(),
    __metadata("design:type", String)
], ProgressEvent.prototype, "status", void 0);
__decorate([
    class_transformer_1.Expose(),
    __metadata("design:type", String)
], ProgressEvent.prototype, "errorCode", void 0);
__decorate([
    class_transformer_1.Expose(),
    __metadata("design:type", Object)
], ProgressEvent.prototype, "message", void 0);
__decorate([
    class_transformer_1.Expose(),
    __metadata("design:type", Object)
], ProgressEvent.prototype, "callbackContext", void 0);
__decorate([
    class_transformer_1.Expose(),
    __metadata("design:type", Object)
], ProgressEvent.prototype, "callbackDelaySeconds", void 0);
__decorate([
    class_transformer_1.Expose(),
    __metadata("design:type", Object)
], ProgressEvent.prototype, "resourceModel", void 0);
__decorate([
    class_transformer_1.Expose(),
    __metadata("design:type", Array)
], ProgressEvent.prototype, "resourceModels", void 0);
__decorate([
    class_transformer_1.Expose(),
    __metadata("design:type", String)
], ProgressEvent.prototype, "nextToken", void 0);
__decorate([
    class_transformer_1.Exclude(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Object)
], ProgressEvent, "builder", null);
__decorate([
    class_transformer_1.Exclude(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", typeof (_a = typeof T !== "undefined" && T) === "function" ? _a : Object)
], ProgressEvent, "failed", null);
__decorate([
    class_transformer_1.Exclude(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", typeof (_b = typeof T !== "undefined" && T) === "function" ? _b : Object)
], ProgressEvent, "progress", null);
__decorate([
    class_transformer_1.Exclude(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", typeof (_c = typeof T !== "undefined" && T) === "function" ? _c : Object)
], ProgressEvent, "success", null);
ProgressEvent = ProgressEvent_1 = __decorate([
    tombok_1.builder,
    __metadata("design:paramtypes", [Object])
], ProgressEvent);
exports.ProgressEvent = ProgressEvent;
class ResourceHandlerRequest extends interface_1.BaseResourceHandlerRequest {
}
exports.ResourceHandlerRequest = ResourceHandlerRequest;
